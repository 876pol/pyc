/*
    Implementation of Merge Sort in pyc.
*/


// Function to merge two sub-arrays in sorted order.
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays.
    int L[n1];
    int R[n2];

    // Copy data to temp arrays L[] and R[].
    for (int i = 0; i < n1; i += 1) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j += 1) {
        R[j] = arr[m + 1 + j];
    }

    // Merge the temp arrays back into arr[l..r].
    int i = 0; // Initial index of first subarray.
    int j = 0; // Initial index of second subarray.
    int k = l; // Initial index of merged subarray.
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i += 1;
        }
        else {
            arr[k] = R[j];
            j += 1;
        }
        k += 1;
    }

    // Copy the remaining elements of L[], if there are any.
    while (i < n1) {
        arr[k] = L[i];
        i += 1;
        k += 1;
    }

    // Copy the remaining elements of R[], if there are any.
    while (j < n2) {
        arr[k] = R[j];
        j += 1;
        k += 1;
    }
}

// l is for left index and r is right index of the subarray of arr to be sorted.
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and r.
        int m = l + (r - l) / 2;

        // Sort first and second halves.
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

// Function to print an array.
void printArray(int A[], int size) {
    for (int i = 0; i < size; i += 1) {
        print((string) A[i] + " ");
    }
    print("\n");
}

int main() {
    print("Array Size > ");
    int arr_size = (int) scan();

    print("Array Elements > ");
    int arr[arr_size];
    for (int i = 0; i < arr_size; i += 1) {
        arr[i] = (int) scan();
    }

    mergeSort(arr, 0, arr_size - 1);

    print("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}